
import LLMController from '.';
import LLMService from '../../../domain/services/llm';

describe('LLMController', () => {
  let llmController: LLMController;
  let mockLLMService: jest.Mocked<LLMService>;

  beforeEach(() => {
    mockLLMService = {
      upload: jest.fn(),
      confirm: jest.fn(),
      list: jest.fn(),
    } as any; 
    llmController = new LLMController(mockLLMService);
  });

  describe('upload', () => {
    it('should return image data on successful upload', async () => {
      
      const mockResult = {
        image_url: 'http://example.com/image.jpg',
        measure_value: 100,
        measure_uuid: 'uuid-1234',
      };
      mockLLMService.upload.mockResolvedValue(mockResult);

      const req = { body: {
        "image": "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",
        "customer_code": "12341234",
        "measure_datetime": "1000-01-01 00:00:00",
        "measure_type": "WATER"
        } };
      const res = { json: jest.fn() };

      await llmController.upload(req, res);

      expect(mockLLMService.upload).toHaveBeenCalledWith(req.body);
      expect(res.json).toHaveBeenCalledWith({
        image_url: mockResult.image_url,
        measure_value: mockResult.measure_value,
        measure_uuid: mockResult.measure_uuid,
      });
    });
  });

  describe('confirm', () => {
    it('should confirm the reading and return success message', async () => {
      const req = {
        body: {
          measure_uuid: 'uuid-1234',
          confirmed_value: 100,
        },
      };
      const res = { json: jest.fn() };

      await llmController.confirm(req, res);

      expect(mockLLMService.confirm).toHaveBeenCalledWith(req.body.measure_uuid, req.body.confirmed_value);
      expect(res.json).toHaveBeenCalledWith({ success: true });
    });
  });

  describe('listReadings', () => {
    it('should return readings for the given customer code', async () => {
      const req = {
        params: { customer_code: '1234' },
        query: { measure_type: 'WATER' },
      };
      const mockReadings = {
        customer_code: '1234',
        measures: [],
      };
      mockLLMService.list.mockResolvedValue(mockReadings);
      const res = { json: jest.fn() };

      await llmController.listReadings(req, res);

      expect(mockLLMService.list).toHaveBeenCalledWith(req.params.customer_code, req.query.measure_type);
      expect(res.json).toHaveBeenCalledWith(mockReadings);
    });
  });
});
